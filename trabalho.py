# -*- coding: utf-8 -*-
"""Cópia de escalonamento

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-5XZXsHX3RSQMCeZ9zFKSIGKp9Ji7xVL

primeiro codigo feito em otimização de dados
"""

!pip install pulp
import pulp
import matplotlib.pyplot as plt
import numpy as np

# Cria o problema de otimização
prob = pulp.LpProblem('Problema de Programação Linear', pulp.LpMaximize)

# Define as variáveis de decisão
x = pulp.LpVariable('x', lowBound=0)
y = pulp.LpVariable('y', lowBound=0)

# Define a função objetivo
prob += 3*x + 5*y

# Define as restrições
prob += x <= 4
prob += y <= 6
prob += x + 2*y <= 10

# Resolve o problema de otimização
prob.solve()

# Imprime a solução
print('x =', pulp.value(x))
print('y =', pulp.value(y))
print('Valor ótimo =', pulp.value(prob.objective))

# Plota o gráfico
x_vals = np.linspace(0, 10, 100)
y_vals1 = 4 - x_vals
y_vals2 = 6 * np.ones_like(x_vals)
y_vals3 = (10 - x_vals)/2

plt.plot(x_vals, y_vals1, label='x <= 4')
plt.plot(x_vals, y_vals2, label='y <= 6')
plt.plot(x_vals, y_vals3, label='x + 2y <= 10')

plt.fill_between(x_vals, 0, y_vals1, alpha=0.1)
plt.fill_between(x_vals, 0, y_vals2, alpha=0.1)
plt.fill_between(x_vals, 0, y_vals3, where=(y_vals3 <= y_vals2) & (y_vals3 >= y_vals1), alpha=0.1)

plt.plot(pulp.value(x), pulp.value(y), 'ro', label='Solução ótima')

plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()

