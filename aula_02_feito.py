# -*- coding: utf-8 -*-
"""aula 02 feito

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FQTuqfQBWxKjsoYd_1PeADHIqy8vbpqZ

primeiro codigo feito em otimização de dados
"""

import re #expressao regular (regular expression)

nomesVariaveis = {} #dicionario com o nome das variaveis

def retornaCoeficiente(linha,pos):
    valor = []
    pc = pos -1
    while pc >= 0:

      if linha[pc] =='+' or linha[pc] == '-':
        if linha[pc] == '-':
          valor.append(linha[pc])
          if len(valor)== 1:
            #valor.append('1')
            valor.insert(0,'1')
            #valor.append('-')
          break
        else:
          if len(valor)== 0:
            valor.append('1')
          break
      valor.append(linha[pc])
      pc = pc-1
    #print(valor)
    valor.reverse()
    return ''.join(valor)

def insereVariavel(variavel):
  if variavel not in nomesVariaveis:
    nomesVariaveis[variavel]='sim'

def separaCoef_var(termo):
  coef = ''
  variavel = ''
  indice=0
  for letra in termo:
    if(letra.isdigit()):
      coef=coef+letra
      indice+=1 #incrementa o indice
    else:
      if indice==0:#a primeira letra nao eh numero
        coef='1'
      variavel = termo[indice:]
      break #sai do for
  return coef,variavel

#monta um vetor com os coeficientes a partir da linha
def montaCoeficientes(linha_entrada,lado_direito):
  
  nV = nomesVariaveis.keys()
  dado_coef =[]
  for nomeV in nV: # cada nome de variavel entre todas.
  #vamos procurar cada nome de variavel em cada linha
    pos = linha_entrada.find(nomeV)
    coef = -100
    if pos<0 :
      coef = 0
      dado_coef.append(coef)
    else:
      if pos == 0:
        coef=1
      else:
        if pos == 1:#nome da variavel esta na posição 1
          if linha_entrada[pos -1]=='-':
            coef = -1
          else:
            coef = int(linha_entrada[pos-1])
        else:#nome da variavel esta na posição > 1
             #tratamento do coeficiente
             coef = retornaCoeficiente(linha_entrada,pos)
      dado_coef.append(coef) #adiciona os valores dos coeficientes do lado esquerdo na lista
      print(nomeV,':',pos,'c:',coef)
      
  dado_coef.append(lado_direito)#adiciona na nova lista o valor do lado direito
  dado_coef = [float(elemento) for elemento in dado_coef]#converte a lista do tipo string para float
  print(dado_coef) #imprime os valores guardados na lista
  return dado_coef

def abre_arquivo(nomeArquivo):
  tabela_coef = [] #lista com valores de coeficiente
  dados = open(nomeArquivo)
  for linha in dados:#percorre linha a linha o arquivo
    print(linha)
    linha = linha.replace(' ','')
    elementos = linha.split('=')#quebra a linha no igual
    le = elementos[0]
    ld = elementos[1].rstrip()
    #print('LE:',le,'LD:',ld)
    #iremos quebrar o lado esquerdo pelos simbolos + e -
    termos = re.split('-|\+',le)
    for termo in termos:
      if len(termo) > 0:
        c,v = separaCoef_var(termo.lstrip().rstrip())
        insereVariavel(v)
        print('termo',termo)

      continue 
    print(nomesVariaveis.keys())
    montaCoeficientes(linha,ld)
    tabela_coef.append(montaCoeficientes(linha,ld))#adiciona na lista tabela_coef a lista dado_coef
    #print('todos oe coeficiente: ',tabela_coef )#imprime na tela a lista tabela_coef
    print('tabela') # coeficiente em tabela
    for i in tabela_coef:
      print(i)
abre_arquivo('/content/drive/MyDrive/otimização/equacoes.txt')
def divide_diagonal(matriz):
    n_linhas = len(matriz)
    n_colunas = len(matriz[0])

    # percorre a diagonal da matriz
    for i in range(min(n_linhas, n_colunas)):
        if matriz[i][i] != 0: # se o elemento da diagonal for diferente de zero
            matriz[i][i] /= matriz[i][i] # divide pelo próprio valor
            tabela_coef = divide_diagonal(tabela_coef)
            print(tabela_coef, 'matriz')
    return matriz