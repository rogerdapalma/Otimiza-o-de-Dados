# -*- coding: utf-8 -*-
"""Trabalho final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gwORINJVcEqxy1ATecTXN33XrwfCjMTh

primeiro codigo feito em otimização de dados
"""

import matplotlib.pyplot as plt
import networkx as nx

class Aresta:
    def __init__(self, grafo, origem, destino, custo, transporte):
        # Verifica se a origem está presente nos vértices do grafo
        if origem in grafo.vertices:
            self.origem = origem
        else:
            print('Origem não está no grafo!')
            self.origem = None
            return None

        # Verifica se o destino está presente nos vértices do grafo
        if destino in grafo.vertices:
            self.destino = destino
        else:
            print('Destino não está no grafo!')
            self.destino = None
            return None

        self.custo = custo
        self.transporte = transporte


class Grafo:
    def __init__(self):
        self.vertices = []  # Lista para armazenar os vértices do grafo
        self.arestas = []   # Lista para armazenar as arestas do grafo

    def adicionaVertice(self, nome):
        self.vertices.append(nome)
        return len(self.vertices)

    def adicionaAresta(self, origem, destino, custo, transporte):
        a = Aresta(self, origem, destino, custo, transporte)
        if a.origem is not None and a.destino is not None:
            print('Adicionando aresta...')
            self.arestas.append(a)
            print('Aresta adicionada!')
        return len(self.arestas)

    def inicializaComArquivo(self, arquivo):
        with open(arquivo, 'r') as file:
            lines = file.readlines()
            vertices = lines[0].strip().split(',')
            for vertex in vertices:
                print(f'Adicionando vértice: {vertex}')
                self.adicionaVertice(vertex)
            print('---')
            flow_data = ''.join(lines[1:])
            flows = flow_data.split(';')
            for flow in flows:
                flow = flow.strip()
                if flow:
                    aresta_data = flow.split(',')
                    if len(aresta_data) == 4:
                        origem, destino, custo, transporte = aresta_data
                        print(f'Adicionando aresta: origem={origem}, destino={destino}, custo={custo}, transporte={transporte}')
                        self.adicionaAresta(origem, destino, int(custo), int(transporte))
                    else:
                        print(f"Dados inválidos na linha: {flow}")
                print('---')

    def calcularMenorCustoEntrega(self):
        menor_custo = float('inf')
        melhor_rota = None

        for aresta in self.arestas:
            if aresta.custo < menor_custo:
                menor_custo = aresta.custo
                melhor_rota = (aresta.origem, aresta.destino)

        return menor_custo, melhor_rota

    def calcularMaiorCustoEntrega(self):
        maior_custo = float('-inf')
        melhor_rota = None

        for aresta in self.arestas:
            if aresta.custo > maior_custo:
                maior_custo = aresta.custo
                melhor_rota = (aresta.origem, aresta.destino)

        return maior_custo, melhor_rota

    def calcularMenorCustoMaiorTransporte(self):
        menor_custo = float('inf')
        maior_transporte = float('-inf')
        melhor_rota = None

        for aresta in self.arestas:
            if aresta.custo < menor_custo:
                menor_custo = aresta.custo
                maior_transporte = aresta.transporte
                melhor_rota = (aresta.origem, aresta.destino)
            elif aresta.custo == menor_custo and aresta.transporte > maior_transporte:
                maior_transporte = aresta.transporte
                melhor_rota = (aresta.origem, aresta.destino)

        return menor_custo, maior_transporte, melhor_rota

    def plotarGrafo(self):
        G = nx.DiGraph()
        edge_labels = {}

        for aresta in self.arestas:
            origem = aresta.origem
            destino = aresta.destino
            custo = aresta.custo
            transporte = aresta.transporte

            G.add_edge(origem, destino, weight=custo)
            edge_labels[(origem, destino)] = f"Custo: {custo}\nTransporte: {transporte}"

        pos = nx.spring_layout(G, seed=42)
        nx.draw(G, pos, with_labels=True, node_size=800, node_color='lightblue', font_size=10)
        nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

        plt.title("Grafo")
        plt.axis("off")
        plt.show()


# Criação de um objeto Grafo
g = Grafo()

# Inicializa o grafo a partir de um arquivo 'grafo.txt'
g.inicializaComArquivo('/content/drive/MyDrive/grafo.txt')

# Calcule o custo mínimo de entrega
menor_custo, melhor_rota = g.calcularMenorCustoEntrega()
print(f"Menor custo de entrega: {menor_custo}")
print(f"Melhor rota: {melhor_rota}")

# Calcule o custo máximo de entrega
maior_custo, melhor_rota = g.calcularMaiorCustoEntrega()
print(f"Maior custo de entrega: {maior_custo}")
print(f"Melhor rota: {melhor_rota}")

# Calcule o custo mínimo com o transporte mais alto
menor_custo, maior_transporte, melhor_rota = g.calcularMenorCustoMaiorTransporte()
print(f"Menor custo de entrega com o maior transporte: {menor_custo}")
print(f"Maior transporte: {maior_transporte}")
print(f"Melhor rota: {melhor_rota}")

# Plote o gráfico do grafo
g.plotarGrafo()